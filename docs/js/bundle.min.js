(function () {
    'use strict';

    function clean (oldData) {
        // console.log(oldData);

        let newData = oldData.data.results;

        return newData = newData.map((data) => {
            let creators = data.creators.items.reduce((creators,creator) => creators.concat(creator.name),[]);
            let characters = data.characters.items.reduce((acc, data) => acc.concat(data.name),[]);
            // console.log(characters)
            // let stories = data.stories.items.reduce((stories,story) => stories.concat(story),[]);
            return {
                id : data.id,
                name: data.name || data.title,
                thumbnail: data.thumbnail,
                creatorsName: creators,
                charactersName: characters
                // storiesThumbnail: stories.thumbnail
            }
        });

        // https://stackoverflow.com/questions/48435515/how-to-flatten-nested-array-of-object-using-es6
        // https://stackoverflow.com/questions/54733622/i-need-remove-unnecessary-json-objects-form-my-result-json-file-using-javascript
    }

    // create html element
    function createElement (jsonData, selector) {
        for (const comic of jsonData) {
            const className = `.${selector}`;
            const section = document.querySelector(className);
            section.insertAdjacentHTML('beforeend',
                `<article>
                <img src="${comic.thumbnail.path}.${comic.thumbnail.extension}">
                <a href="#${selector}/${comic.id}"><h2>${comic.name}</h2></a>
            </article>`);
        }
    }

    // create detail html element with classname
    function createDetail (jsonData, selector) {
        const className = `.${selector}`;
        const section = document.querySelector(className);
        let list = '';

        for (const creator of jsonData.creatorsName) {
            list += `<li>${creator}<li/>`;
        }

        const element = 
        `<article>
        <h2>${jsonData.name}</h2>
        <img src="${jsonData.thumbnail.path}.${jsonData.thumbnail.extension}">
        <h3>Creators</h3>
        <ul>${list}</ul>
    </article>`;

        section.insertAdjacentHTML('afterbegin', element);
    }

    //clean up existing child elements
    function clearElements() {
        const section = document.querySelector('section');
        while (section.firstChild) {
            section.removeChild(section.firstChild);
        }
        // https://medium.com/front-end-weekly/remove-all-children-of-the-node-in-javascript-968ad8f120eb
    }

    // render overview page
    function allComics (data) {
        createElement(data, 'comics');
    }

    // render detailpage
    function comic (data) {
        createDetail(data, 'comic-detail');
    }

    function createEndpoint(queries) {
        // create endpoint url
        const endpointMarvel = 'https://gateway.marvel.com/v1/public/';
        const apiKey = '&apikey=22b5f2403c91db4fba23cad90a8b2ab7';
        const hash = '&hash=e6bb9dbff35775d2d8aed171d44888d4';
        const timestamp = 'ts=1581025873';
        const category = 'comics';
        const query = queries;
        const endpoint = `${endpointMarvel}${category}?${query}&${timestamp}&${apiKey}&${hash}`;
        return endpoint;
    }

    // fetched data and clean it
    async function fetchData (url) {
        const response = await fetch(url);
        const jsonData = await response.json();
        const cleanData = clean(jsonData);
        return cleanData;
    }

    // fetch data and find the correct comic with id
    async function findComic (id) {
        const comicsEndpoint = getComicsEndpoint();
        const comics = await fetchData(comicsEndpoint);
        const findData = comics.find((data) => data.id == id);
        return findData;
        // https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d
    }

    // Get data for the overview page and render
    async function getAllComics () {
        const comicsEndpoint = getComicsEndpoint();
        const comics = await fetchData(comicsEndpoint);
        allComics(comics);
    }

    // Get data for the detail page and render
    async function getComic (id) {
        const comic$1 = await findComic(id);
        comic(comic$1);
    }

    function getComicsEndpoint () {
        const comicsEndpoint = createEndpoint('dateDescriptor=thisMonth&orderBy=onsaleDate&limit=10');
        return comicsEndpoint;
    }

    function getSearchEndpoint (searchinput) {
        const searchEndpoint = createEndpoint(`titleStartsWith=${searchinput}`);
        return searchEndpoint;
    }

    // Search for comic with name
    async function getSearchResults (inputValue) {
        const searchEndpoint = getSearchEndpoint(inputValue);
        const searchResults = await fetchData(searchEndpoint);
        clearElements();
        allComics(searchResults);
    }

    const button = document.querySelector('button');

    async function search () {
        var value = document.querySelector('input').value;
        getSearchResults(value);
    }

    button.addEventListener('click', search);

    var api = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAllComics: getAllComics,
        getSearchResults: getSearchResults,
        getComic: getComic
    });

    function init () {

        routie({
            '': function () {
                getAllComics();
                undefined();
            },
            'characters': function () {
                // api.getAllCharacters();
            },
            'comics': function () {
                getAllComics();
                undefined();
            },
            'comics/:id': function (id) {
                getComic(id);

            }
        });
    }

    init();

}());
