(function () {
    'use strict';

    const clean = (oldData) => {
        // console.log(oldData);

        let newData = oldData.data.results;

        return newData = newData.map((data) => {
            let creators = data.creators.items.reduce((creators,creator) => creators.concat(creator.name),[]);
            let characters = data.characters.items.reduce((acc, data) => acc.concat(data.name),[]);
            // console.log(characters)
            // let stories = data.stories.items.reduce((stories,story) => stories.concat(story),[]);
            return {
                id : data.id,
                name: data.name || data.title,
                thumbnail: data.thumbnail,
                creatorsName: creators,
                charactersName: characters
                // storiesThumbnail: stories.thumbnail
            }
        });

        // https://stackoverflow.com/questions/48435515/how-to-flatten-nested-array-of-object-using-es6

        // https://stackoverflow.com/questions/54733622/i-need-remove-unnecessary-json-objects-form-my-result-json-file-using-javascript
    };

    const createElement = (jsonData, selector) => {
    console.log(jsonData);
        for (const comic of jsonData) {
            const className = `.${selector}`;
            const section = document.querySelector(className);
            section.insertAdjacentHTML('beforeend',
                `<article>
                <img src="${comic.thumbnail.path}.${comic.thumbnail.extension}">
                <a href="#${selector}/${comic.id}"><h2>${comic.name}</h2></a>
            </article>`);
        }
    };

    const createDetail = (jsonData, selector) => {
        // console.log(jsonData);
        // for (const comic of jsonData) {
            const className = `.${selector}`;
            const section = document.querySelector(className);
            let list = '';

            for (const creator of jsonData.creatorsName) {
                list += `<li>${creator}<li/>`;
            }

            const element = 
            `<article>
            <h2>${jsonData.name}</h2>
            <img src="${jsonData.thumbnail.path}.${jsonData.thumbnail.extension}">
            <h3>Creators</h3>
            <ul>${list}</ul>
        </article>`;

            section.insertAdjacentHTML('beforeend', element);
        // }
    };

    // render html element
    const allComics = async (data) => {
        createElement(data, 'comics');
    };

    const comic = async (data) => {
        createDetail(data, 'comic-detail');
    };

    const baseUrl = new URL('https://gateway.marvel.com/v1/public/');
    const comicsEndpoint = new URL('comics', baseUrl);
    const charactersEndpoint = new URL('characters', baseUrl);

    // https://blog.bitsrc.io/using-the-url-object-in-javascript-5f43cd743804
    // Thijs

    const queries = {
        dateDescriptor: 'thisMonth',
        orderBy: 'onsaleDate',
        limit: 20,
        ts: '1581025873',
        apikey: '22b5f2403c91db4fba23cad90a8b2ab7',
        hash: 'e6bb9dbff35775d2d8aed171d44888d4'
    };

    const searchParams = new URLSearchParams(queries);
    comicsEndpoint.search = searchParams;

    // fetched data
    const fetchData = async (url) => {
        const response = await fetch(url);
        const jsonData = await response.json();
        const cleanData = clean(jsonData);
        return cleanData;
    };

    const findComic = async (id) => {
        const comics = await fetchData(comicsEndpoint);
        const comic = comics.find((data) => data.id == id);
        return comic;
        // https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d
    };

    // api.getAllComics
    // api.getComic
    // api.init

    const getAllComics = async () => {
        const comics = await fetchData(comicsEndpoint);
        allComics(comics);
    };

    const getComic = async (id) => {
        const comic$1 = await findComic(id);
        comic(comic$1);
    };

    // fetch data for overview page
    // but also for detailpage
    // check if the data already exist if not fetch data

    var api = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAllComics: getAllComics,
        getComic: getComic
    });

    const routes = () => {
        
        
        routie({
            '': function () {
                getAllComics();        },
            'characters': function () {
                undefined();
            },
            'comics': function () {
                // api.getAllComics();;
            },
            'comics/:id': function (id) {
                getComic(id);
            }
        });
    };

    routes();
    // https://superheroapi.com/api/1776314525838688/search/

}());
