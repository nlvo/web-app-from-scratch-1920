(function () {
    'use strict';

    function clean (oldData) {
        // console.log(oldData);

        let newData = oldData.data.results;
        
        return newData = newData.map((data) => {
            // https://stackoverflow.com/questions/54513877/javascript-merge-multiple-object-values-into-array
            const creators = data.creators ? data.creators.items.map(creators => creators.name) : '';
            const thumbnail = data.thumbnail.path.includes('image_not_available') ? 'img/not-found' : data.thumbnail.path;
            return {
                id : data.id,
                name: data.name || data.title,
                thumbnail: thumbnail + '.' + data.thumbnail.extension,
                comicsAvailabe: data.comics ? data.comics.available : data.description,
                creators: creators,
                // characters: characters,
                // stories: stories
            }
        });

        // https://stackoverflow.com/questions/48435515/how-to-flatten-nested-array-of-object-using-es6
        // https://stackoverflow.com/questions/54733622/i-need-remove-unnecessary-json-objects-form-my-result-json-file-using-javascript
    }

    // create html element
    function createElement (jsonData, selector) {
    // console.log(jsonData)
        const section = document.querySelector('section');
        section.className = '';
        section.classList.add(selector);
        for (const comic of jsonData) {
            section.insertAdjacentHTML('beforeend',
                `<article>
                <img src="${comic.thumbnail}">
                <a href="#${selector}/${comic.id}"><h2>${comic.name}</h2></a>
                <p>Comics (${comic.comicsAvailabe})</p>
            </article>`);
        }
    }

    // create detail html element with classname
    function createDetail (jsonData, selector) {
        const section = document.querySelector('section');
        section.className = '';
        section.classList.add(selector);
        let list = '';

        for (const creator of jsonData.creators) {
            list += `<li>${creator}<li/>`;
        }

        const element = 
        `<article>
        <h2>${jsonData.name}</h2>
        <img src="${jsonData.thumbnail}">
        <h3>Creators</h3>
        <ul>${list}</ul>
    </article>`;

        section.insertAdjacentHTML('afterbegin', element);
    }

    //clean up existing child elements
    function removeElements() {
        const section = document.querySelector('section');
        while (section.firstChild) {
            section.removeChild(section.firstChild);
        }
        // https://medium.com/front-end-weekly/remove-all-children-of-the-node-in-javascript-968ad8f120eb
    }

    // render overview page
    function allComics (data) {
        removeElements();
        createElement(data, 'comics');
    }

    function allCharacters (data) {
        removeElements();
        createElement(data, 'characters');
    }

    // render detailpage
    function comic (data) {
        removeElements();
        createDetail(data, 'comic-detail');
    }

    function searchResults (data) {
        removeElements();
        createElement(data, 'comics');
    }

    let links = document.querySelectorAll('.link');

    function currentPage () {
        const page = location.hash.replace('#', '');
        return page;
    }

    function setPageActive () {
        const activePage = currentPage();
        for(let i = 0; i < links.length; i++) {
            const link = links[i].getAttribute('href').replace('#', '');
            if(link == activePage){
                links[i].classList.add('active');
            }
        }
    }

    function setLinkActive () {
        for(let i = 0; i < links.length; i++) {
            if(links[i].classList.contains('active')){
                links[i].classList.remove('active');
            }
        }
        this.classList.add('active');
    }

    for(let i = 0; i < links.length; i++) {
        links[i].addEventListener('click', setLinkActive);  
    }

    setPageActive();

    // Get data for the overview page and render
    async function showAllComics () {
        const comics = await getAllComics();
        allComics(comics);
    }

    // Fetch data
    async function getAllComics () {
        const comicsEndpoint = createComicsEndpoint();
        const comics = await fetchData(comicsEndpoint);
        return comics;
    }

    function createComicsEndpoint () {
        const comicsEndpoint = createEndpoint('comics', 'dateDescriptor=thisMonth&orderBy=onsaleDate&limit=10');
        return comicsEndpoint;
    }

    // Get data for the overview page and render
    async function showAllCharacters () {
        const characters = await getAllCharacters();
        allCharacters(characters);
    }

    // Fetch data
    async function getAllCharacters () {
        const charactersEndpoint = createCharactersEndpoint();
        const characters = await fetchData(charactersEndpoint);
        return characters;
    }

    function createCharactersEndpoint () {
        const charactersEndpoint = createEndpoint('characters', 'orderBy=-modified');
        return charactersEndpoint;
    }

    function createEndpoint(category, query) {
        // create endpoint url
        const endpointMarvel = 'https://gateway.marvel.com/v1/public/';
        const apiKey = '22b5f2403c91db4fba23cad90a8b2ab7';
        const hash = 'e6bb9dbff35775d2d8aed171d44888d4';
        const timestamp = '1581025873';
        // const category = category;
        // const query = queries;
        const endpoint = `${endpointMarvel}${category}?${query}&ts=${timestamp}&apikey=${apiKey}&hash=${hash}`;
        // console.log(endpoint)
        return endpoint;
    }

    // fetched data and clean it
    async function fetchData (url) {
        const response = await fetch(url);
        const jsonData = await response.json();
        const cleanData = clean(jsonData);
        return cleanData;
    }

    // Get data for the detail page and render
    async function showComic (id) {
        const comic$1 = await getComic(id);
        comic(comic$1);
    }

    // fetch data and find the correct comic with id
    async function getComic (id) {
        const comicsEndpoint = createComicsEndpoint();
        const comics = await fetchData(comicsEndpoint);
        const findData = comics.find((data) => data.id == id);
        return findData;
        // https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d
    }

    // Search for comic with name
    async function showSearchResults () {
        const searchResults$1 = await getSearchResults();
        searchResults(searchResults$1);
    }

    async function getSearchResults (){
        const searchEndpoint = createSearchEndpoint();
        const searchResults = await fetchData(searchEndpoint);
        return searchResults
    }

    function createSearchEndpoint () {
        const searchInput = getSearchInput();
        const searchEndpoint = createEndpoint('comics', `titleStartsWith=${searchInput}`);
        return searchEndpoint;
    }

    const button = document.querySelector('button');

    function getSearchInput () {
        var value = document.querySelector('input').value;
        return value;
    }

    button.addEventListener('click', showSearchResults);

    function init () {

        routie({
            '': function () {
                showAllComics();
            },
            'characters': function () {
                showAllCharacters();
            },
            'comics': function () {
                showAllComics();
            },
            'comics/:id': function (id) {
                showComic(id);
            }
        });
    }

    init();

}());
